# Build a package and optionally publish it

parameters:
  buildConfiguration: 'Release'
  publishBuildArtifacts: 'false' # true to publish the build artifacts; false otherwise

steps:
- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: restore
    projects: '**/*.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }}'

- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: build
    projects: '**/*.sln'
    arguments: '--configuration ${{ parameters.buildConfiguration }}'

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: test
    projects: '$(Build.SourcesDirectory)/src/**/*.Tests.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }} /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[xunit*]*%2c[AtleX*.Tests]*"'

- task: PublishCodeCoverageResults@1
  condition:  ${{ if eq(parameters.publishBuildArtifacts, 'true') }}
  displayName: 'Publish code coverage results'
  inputs:
    summaryFileLocation: $(Build.SourcesDirectory)/src/**/coverage.cobertura.xml
    codecoverageTool: cobertura

- task: CopyFiles@2
  condition:  ${{ if eq(parameters.publishBuildArtifacts, 'true') }}
  displayName: 'Copy NuGet package to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: '**/*.nupkg'
    TargetFolder: '$(build.artifactstagingdirectory)'
    flattenFolders: true
    
- task: CopyFiles@2
  condition:  ${{ if eq(parameters.publishBuildArtifacts, 'true') }}
  displayName: 'Copy NuGet symbols package to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: '**/*.snupkg'
    TargetFolder: '$(build.artifactstagingdirectory)'
    flattenFolders: true

- task: PublishBuildArtifacts@1
  condition:  ${{ if eq(parameters.publishBuildArtifacts, 'true') }}
  displayName: 'Publish Artifact: NuGet packages'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: 'NuGet packages'